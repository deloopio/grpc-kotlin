@file:Suppress("EXPERIMENTAL_API_USAGE")

{{#packageName}}
package {{packageName}}
{{/packageName}}

import io.grpc.*
import io.grpc.stub.*
import io.rouz.grpc.*

import kotlin.coroutines.*
import kotlinx.coroutines.*
import kotlinx.coroutines.channels.*
import dagger.Subcomponent
import dagger.BindsInstance
import javax.inject.Inject

{{#javaDoc}}{{{javaDoc}}}{{/javaDoc}}
{{#deprecated}}@Deprecated("deprecated"){{/deprecated}}
@javax.annotation.Generated(
    value = ["by gRPC Kotlin generator"],
    comments = "Source: {{protoName}}"
)
class {{serviceName}} @Inject constructor(
    @io.rouz.grpc.ForServices context: CoroutineContext
   {{#methods}}
    , private val {{methodName}}ComponentFactory : {{methodNamePascalCase}}Subcomponent.Factory
    {{/methods}}
) : {{serviceName}}Grpc.{{serviceName}}ImplBase() {

    private val coroutineScope = object : CoroutineScope {
      override val coroutineContext: CoroutineContext
         get() = context
    }

    {{#methods}}
    @CallScope
    @Subcomponent
    interface {{methodNamePascalCase}}Subcomponent {
      @Subcomponent.Factory
      interface Factory {
        fun create(@BindsInstance requestData : RequestData) : {{methodNamePascalCase}}Subcomponent
      }
      fun provideHandler() : {{methodNamePascalCase}}Handler
    }

    {{#javaDoc}}{{{javaDoc}}}{{/javaDoc}}
    {{#deprecated}}@Deprecated("deprecated"){{/deprecated}}
    {{^isManyInput}}
    {{^isManyOutput}}
    {{! == unary req, unary resp == }}
    interface {{methodNamePascalCase}}Handler {
        suspend operator fun invoke(request: {{inputType}}): {{outputType}}
    }

    final override fun {{methodName}}(request: {{inputType}}, responseObserver: StreamObserver<{{outputType}}>) {
        val requestData = GrpcKeepRequestDataInterceptor.getKeptRequestData()
        coroutineScope.launch(GrpcContextCoroutineContextElement()) {
            this.doCancelScopeWhenGrpcContextCancelled()
            tryCatchingStatus(responseObserver) {
                val handler = {{methodName}}ComponentFactory.create(requestData)
                                .provideHandler()
                val response = handler.invoke(request)
                onNext(response)
            }
        }
    }

    {{/isManyOutput}}
    {{#isManyOutput}}
    {{! == unary req, streaming resp == }}
    interface {{methodNamePascalCase}}Handler {
       operator fun invoke(request: {{inputType}}, produceScope: ProducerScope<{{outputType}}>)
    }

    final override fun {{methodName}}(request: {{inputType}}, responseObserver: StreamObserver<{{outputType}}>) {
        val requestData = GrpcKeepRequestDataInterceptor.getKeptRequestData()
        coroutineScope.launch(GrpcContextCoroutineContextElement()) {
            this.doCancelScopeWhenGrpcContextCancelled()
            tryCatchingStatus(responseObserver) {
                val handler = {{methodName}}ComponentFactory.create(requestData)
                                 .provideHandler()
                produce<{{outputType}}> { handler.invoke(request, this) }
                  .consumeEach(::onNext)
            }
        }
    }

    {{/isManyOutput}}
    {{/isManyInput}}
    {{#isManyInput}}
    {{^isManyOutput}}
    {{! == TODO streaming req, unary resp == }}
    open suspend fun {{methodName}}(requests: ReceiveChannel<{{inputType}}>): {{outputType}} {
        throw unimplemented(get{{methodNamePascalCase}}Method()).asRuntimeException()
    }

    internal fun {{methodName}}Internal(
        responseObserver: StreamObserver<{{outputType}}>
    ): StreamObserver<{{inputType}}> {
        val requests = StreamObserverChannel<{{inputType}}>()
        coroutineScope.launch(GrpcContextCoroutineContextElement()) {
            this.doCancelScopeWhenGrpcContextCancelled()
            tryCatchingStatus(responseObserver) {
                val response = {{methodName}}(requests)
                onNext(response)
            }
        }
        return requests
    }
    {{/isManyOutput}}
    {{#isManyOutput}}
    {{! == TODO streaming req, streaming resp == }}
    open fun {{methodName}}(requests: ReceiveChannel<{{inputType}}>): ReceiveChannel<{{outputType}}> {
        throw unimplemented(get{{methodNamePascalCase}}Method()).asRuntimeException()
    }

    internal fun {{methodName}}Internal(
        responseObserver: StreamObserver<{{outputType}}>
    ): StreamObserver<{{inputType}}> {
        val requests = StreamObserverChannel<{{inputType}}>()
        coroutineScope.launch(GrpcContextCoroutineContextElement()) {
            this.doCancelScopeWhenGrpcContextCancelled()
            tryCatchingStatus(responseObserver) {
                val responses = {{methodName}}(requests)
                for (response in responses) {
                    onNext(response)
                }
            }
        }
        return requests
    }
    {{/isManyOutput}}
    {{/isManyInput}}
    {{/methods}}

    private fun unimplemented(methodDescriptor: MethodDescriptor<*, *>): Status {
        return Status.UNIMPLEMENTED
            .withDescription("Method ${methodDescriptor.fullMethodName} is unimplemented")
    }

    private fun <E> handleException(t: Throwable?, responseObserver: StreamObserver<E>) {
        when (t) {
            null -> return
            is CancellationException -> handleException(t.cause, responseObserver)
            is StatusException, is StatusRuntimeException -> responseObserver.onError(t)
            is RuntimeException -> {
                responseObserver.onError(Status.UNKNOWN.asRuntimeException())
                throw t
            }
            is Exception -> {
                responseObserver.onError(Status.UNKNOWN.asException())
                throw t
            }
            else -> {
                responseObserver.onError(Status.INTERNAL.asException())
                throw t
            }
        }
    }

    private suspend fun <E> tryCatchingStatus(responseObserver: StreamObserver<E>, body: suspend StreamObserver<E>.() -> Unit) {
        try {
            responseObserver.body()
            responseObserver.onCompleted()
        } catch (t: Throwable) {
            handleException(t, responseObserver)
        }
    }
}

private fun CoroutineScope.doCancelScopeWhenGrpcContextCancelled() {
  val onGrpcContextCancelled: (Context) -> Unit = {
    cancel(CancellationException("Grpc context cancelled"))
  }
  Context.current().addListener(onGrpcContextCancelled, Runnable::run)
}
